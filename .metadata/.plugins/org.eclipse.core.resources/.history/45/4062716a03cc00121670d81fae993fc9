 

import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;

import javax.inject.Inject;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import org.eclipse.e4.ui.di.Focus;
import org.eclipse.e4.ui.di.Persist;

public class TestPart {
	@Inject
	public TestPart() {
		//TODO Your code here
	}
	
	@PostConstruct
	public void postConstruct(BorderPane pane) {
		TableView table = new TableView ();
		TableColumn firstNameCol = new TableColumn("First");
		TableColumn lastNameCol  = new TableColumn ("Last");
		TableColumn emailCol = new TableColumn ("Email");
		emailCol.set
		table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);
		pane.setCenter(table);
	}
	
	static class TestTask extends Task<Void> {

	    private final int waitTime; // milliseconds
	    private final int pauseTime; // milliseconds

	    public static final int NUM_ITERATIONS = 100;

	    TestTask(int waitTime, int pauseTime) {
	      this.waitTime = waitTime;
	      this.pauseTime = pauseTime;
	    }

	    @Override
	    protected Void call() throws Exception {
	      this.updateProgress(ProgressIndicator.INDETERMINATE_PROGRESS, 1);
	      this.updateMessage("Waiting...");
	      Thread.sleep(waitTime);
	      this.updateMessage("Running...");
	      for (int i = 0; i < NUM_ITERATIONS; i++) {
	        updateProgress((1.0 * i) / NUM_ITERATIONS, 1);
	        Thread.sleep(pauseTime);
	      }
	      this.updateMessage("Done");
	      this.updateProgress(1, 1);
	      return null;
	    }

	  }
	
	
	@PreDestroy
	public void preDestroy() {
		//TODO Your code here
	}
	
	
	@Focus
	public void onFocus() {
		//TODO Your code here
	}
	
	
	@Persist
	public void save() {
		//TODO Your code here
	}
	
}